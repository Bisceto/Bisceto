//Problem 1

function factorial(n) {
return n === 1
? 1
: n * factorial(n - 1);
}
This function is a recrusive process, due to 
deferred process n * fact(n - 1)

//Problem 2

One definition of steps is the number of sequences of
multiplications, or the number of sequence
of partial products. 

Another definiton of steps is the length of
the chain of deferred multiplications, and hence the
amount of information needed to keep track and evaluate it.

//Problem 3
factorial(5)
5 * factorial(4)
5 * factorial(4))
5 * (4 * factorial(3)))
5 * (4 * (3 * factorial(2))))
5 * (4 * (3 * (2 * factorial(1)))))
5 * (4 * (3 * 2))
5 * (4 * 6)
5 * 24
120
Textbook: 10 steps
Stepper: 50 steps

if double input, factorial(10);
Textbook: ~20 steps
Stepper: 100 steps

Linear relationship n * k, where k is positive number 

//Problem 4
factorial(5) would take 4 deferred functions
(5 * 4 * 3 * 2 * 1)

//Problem 5
Consider the following factorial function from the lecture:
function factorial(n) {
return iter(1, 1, n);
}
function iter(product, counter, n) {
return counter > n
? product
: iter(counter * product, counter + 1, n);
}

factorial(5)
iter(1, 1, 5)
iter(1, 2, 5)
iter(2, 3, 5)
iter(6, 4, 5)
iter(24, 5, 5)
iter(120, 6, 5)

5! 64 steps
10! 114 steps
20! 214 steps

linear relation n * k + c


//Problem 6
0 deferred operations

0 space, only 3 state variables, throughout. CONSTANT SPACE


//Problem 7 
function fib(n) {
return n <= 1
? n
: fib(n - 1) + fib(n - 2);
}
Recursive function, due to deferred process of fib(n-2). evaluate fib(n-1) first. 

//Problem 8
function fib(n) {
return fib_iter(1, 0, n);
}
function fib_iter(a, b, count) {
return count === 0
? b
: fib_iter(a + b, a, count - 1);

fib_iter(5)
fib_iter(1, 0, 5)
fib_iter(1, 1, 4)
fib_iter(2, 1, 3)
fib_iter(3, 2, 2)
fib_iter(5, 3, 1)
fib_iter(8, 5, 0)
8

//Problem 9
0 deferred operations
0 space, 3 variables kept track, 
constant space


